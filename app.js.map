{"mappings":"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","sources":["index.js","app.js","routes/userRoutes.js","controllers/userController.js","Models/userModel.js","controllers/authController.js","routes/productRoutes.js","controllers/productController.js","Models/productModel.js","routes/reviewRoutes.js","controllers/reviewController.js","Models/reviewModel.js","routes/paymentRoutes.js","controllers/paymentController.js","Models/orderModel.js","routes/orderRoutes.js","controllers/orderController.js","routes/cartRoutes.js","controllers/cartController.js","Models/cartModel.js","routes/communicationRoutes.js","controllers/communicationController.js","Models/communicationModel.js"],"sourcesContent":["const mongoose = require('mongoose')\r\nconst http = require('http');\r\nconst dotenv = require('dotenv')\r\nconst express = require('express')\r\nconst app = require('./app');\r\nconst server = http.createServer(express());\r\nconst io = require('socket.io')(server)\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst orderController = require(\"./controllers/orderController\");\r\n\r\ndotenv.config({path: './config.env'})\r\n\r\nlet socketID\r\n\r\nconst identifyUser = (socket, next) => {\r\n  const token = socket.handshake.auth.token; // Assuming token in handshake\r\n  if (!token) {\r\n    return next(new Error('Unauthorized connection'));\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    socket.userID = decoded.id;\r\n    socketID = decoded.id\r\n    next();\r\n  } catch (err) {\r\n    return next(new Error('Invalid token'));\r\n  }\r\n};\r\n\r\n// Socket.IO setup\r\nio.use(identifyUser);\r\n\r\nio.on(\"connection\", socket =>{\r\n  console.log(\"A user connected: \", socket.userID)\r\n  socket.emit('update', {message: 'Now you get to know when the order is complete'})\r\n  socket.join(socket.userID)\r\n\r\n\r\n})\r\n\r\napp.patch(\"/api/v1/orders/deliver/:order\", orderController.deliverOrder, (req, res) =>{\r\n\r\n\r\n  if(req.order.userID.toString() === socketID){\r\n    io.to(socketID).emit('delivered', {message: \"Your order has been delivered\"});\r\n  } else{\r\n    return res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"This user didn't make this order\"\r\n    })\r\n  }\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    order: req.order,\r\n  });\r\n})\r\n\r\nserver.listen(process.env.PORT1, () => {\r\n  console.log(`Server is running at http://localhost:5000`);\r\n});\r\n\r\nconst DB = process.env.DATABASE.replace(\r\n  '<PASSWORD>',\r\n  process.env.DATABASE_PASSWORD\r\n);\r\n\r\n\r\nmongoose\r\n  .connect(DB, {\r\n    useNewUrlParser: true,\r\n    dbName: 'RoomService'\r\n    // useCreateIndex: true,\r\n    // useFindAndModify: false\r\n  })\r\n  .then(() => console.log('DB connection successful!'));\r\n\r\napp.listen(process.env.PORT, () => {\r\n  console.log(`Server is running at http://localhost:${process.env.PORT}`);\r\n});\r\n\r\nmodule.exports = io","const express = require(\"express\");\r\nconst morgan = require(\"morgan\");\r\nconst session = require(\"express-session\");\r\n// const rateLimit = require(\"express-rate-limit\");\r\nconst helmet = require(\"helmet\");\r\nconst mongoSanitize = require(\"express-mongo-sanitize\");\r\nconst xss = require(\"xss-clean\");\r\nconst hpp = require(\"hpp\");\r\nconst compression = require(\"compression\");\r\n\r\nconst userRoutes = require(\"./routes/userRoutes\");\r\nconst productRoutes = require(\"./routes/productRoutes\");\r\nconst reviewRoutes = require(\"./routes/reviewRoutes\");\r\nconst paymentRoutes = require(\"./routes/paymentRoutes\");\r\nconst orderRoutes = require(\"./routes/orderRoutes\");\r\nconst cartRoutes = require(\"./routes/cartRoutes\");\r\nconst communicationRoutes = require(\"./routes/communicationRoutes\");\r\nconst dotenv = require(\"dotenv\");\r\nconst cors = require(\"cors\");\r\n\r\ndotenv.config({ path: \"./config.env\" });\r\n\r\nconst authController = require(\"./controllers/authController\");\r\n\r\nconst app = express();\r\n\r\n// Set Security HTTP Headers\r\napp.use(helmet());\r\n\r\n// Limit request from same IP address\r\n// const limiter = rateLimit({\r\n//   max: 100,\r\n//   windiwMs: 60 * 60 * 1000,\r\n//   message: \"Too many request from this IP, please try again in an hour\",\r\n// });\r\n\r\n// app.use(limiter);\r\n\r\napp.use(cors());\r\n\r\napp.use(morgan(\"dev\"));\r\n\r\napp.use(express.json());\r\n\r\napp.use(mongoSanitize());\r\n\r\napp.use(xss());\r\n\r\n// Prevent Parameter Pollution\r\napp.use(hpp());\r\n\r\napp.use(compression());\r\n\r\napp.use((req, res, next) => {\r\n  req.requestTime = new Date().toISOString();\r\n  console.log(req.requestTime);\r\n  next();\r\n});\r\n\r\napp.use(\"/api/v1/users\", userRoutes);\r\napp.use(\"/api/v1/products\", productRoutes);\r\napp.use(\"/api/v1/reviews\", reviewRoutes);\r\napp.use(\"/api/v1/payments\", paymentRoutes);\r\napp.use(\"/api/v1/orders\", orderRoutes);\r\napp.use(\"/api/v1/cart\", cartRoutes);\r\napp.use(\"/api/v1/communications\", communicationRoutes);\r\n\r\n// Phone Number verification using TWILIO\r\n\r\n// app.get(\"/getCode/:number\", (req, res) => {\r\n//   try {\r\n//     const client = require(\"twilio\")(\r\n//       process.env.TWILIO_ACCOUNTSID,\r\n//       process.env.TWILIO_AUTHTOKEN\r\n//     );\r\n//     client.verify.v2\r\n//       .services(process.env.TWILIO_SERVICE)\r\n//       .verifications.create({ to: req.params.number, channel: \"sms\" })\r\n//       .then((verification) => console.log(verification.valid));\r\n\r\n//     res.status(200).json({\r\n//       status: \"success\",\r\n//     });\r\n//   } catch (err) {\r\n//     res.status(400).json({\r\n//       status: \"fail\",\r\n//       message: \"just chill, I have no idea\",\r\n//       error: err,\r\n//     });\r\n//   }\r\n// });\r\n\r\n// app.get(\"/verifyPhone/:number/:code\", async (req, res) => {\r\n//   try {\r\n//     const client = require(\"twilio\")(\r\n//       process.env.TWILIO_ACCOUNTSID,\r\n//       process.env.TWILIO_AUTHTOKEN\r\n//     );\r\n//     const verificationCheck = await client.verify.v2\r\n//       .services(process.env.TWILIO_SERVICE)\r\n//       .verificationChecks.create({\r\n//         to: req.params.number,\r\n//         code: req.params.code,\r\n//       });\r\n//     if (verificationCheck.status === \"approved\") {\r\n//       res.status(200).json({\r\n//         status: \"success\",\r\n//         verification: verificationCheck.status,\r\n//       });\r\n//       console.log(\"Verification successful!\");\r\n//     } else {\r\n//       res.status(200).json({\r\n//         status: \"fail\",\r\n//         verification: verificationCheck.status,\r\n//       });\r\n//       console.log(\"Verification failed.\");\r\n//     }\r\n//   } catch (err) {\r\n//     res.status(400).json({\r\n//       status: \"fail\",\r\n//       message: \"just chill, I have no idea\",\r\n//       error: err.message,\r\n//     });\r\n//   }\r\n// });\r\n\r\nfunction smsCallback(error, responseBody) {\r\n  if (error === null) {\r\n    console.log(\"\\nResponse body:\\n\" + JSON.stringify(responseBody));\r\n  } else {\r\n    console.error(\"Unable to send SMS. Error:\\n\\n\" + error);\r\n  }\r\n}\r\n\r\napp.get(\"/getCode/\", (req, res) => {\r\n  try {\r\n    const TelesignSDK = require(\"telesignenterprisesdk\");\r\n\r\n    const customerId = process.env.CUSTOMER_ID;\r\n    const apiKey = process.env.TELESIGNAPIKEY;\r\n    // const phoneNumber = \"6292441577\";\r\n    const phoneNumber = \"+16156688834\";\r\n    const verifyCode = Math.floor(Math.random() * 999999).toString();\r\n    const params = {\r\n      verify_code: verifyCode,\r\n    };\r\n\r\n    const client = new TelesignSDK(customerId, apiKey);\r\n    client.verify.sms(smsCallback, phoneNumber, params);\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"just chill, I have no idea\",\r\n      error: err,\r\n    });\r\n  }\r\n});\r\n\r\napp.get(\"/verifyPhone/\", (req, res) => {\r\n  // try {\r\n  const sdk = require(\"api\")(\"@telesign-enterprise/v1.0#jnsb20tlu2wb12v\");\r\n  sdk.auth(customerId, apiKey);\r\n  sdk\r\n    .getVerifyStatus({\r\n      reference_id: \"6639DEB2BE4C0A049194D7CEB5B14CE7\",\r\n      verify_code: \"916193\",\r\n    })\r\n    .then(({ data }) => {\r\n      console.log(data);\r\n      res.status(200).json({\r\n        status: \"success\",\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n      res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"just chill, I have no idea\",\r\n        error: err.message,\r\n      });\r\n    });\r\n});\r\n//..........................................................................................\r\n\r\nmodule.exports = app;\r\n","const express = require(\"express\");\r\nconst userController = require(\"./../controllers/userController\");\r\nconst authController = require(\"./../controllers/authController\")\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post('/signup', authController.signup)\r\nrouter.post('/login', authController.login)\r\nrouter.post('/loginWithEmail', authController.loginEmail)\r\nrouter.post('/loginWithNumber', authController.loginNumber)\r\nrouter.post('/forgotPassword', authController.forgotPassword)\r\nrouter.patch('/resetPassword/:token', authController.resetPassword)\r\nrouter.patch('/updatePassword/:email', authController.updatePassword)\r\n\r\n\r\n\r\nrouter\r\n  .route(\"/\")\r\n  // .get(authController.protect, authController.restrictTo('admin', 'owner'), userController.getAllUsers)\r\n  // .get(authController.protect, authController.restrictTo('admin', 'owner'), userController.getAllUsers)\r\n  .get(userController.getAllUsers)\r\n  .post(authController.protect, authController.restrictTo('admin', 'owner'), userController.createUser);\r\n\r\nrouter\r\n  .route(\"/:user\")\r\n  .get(authController.protect, authController.restrictTo('admin', 'owner'),  userController.getUser)\r\n  .patch(authController.protect,  userController.updateUser)\r\n  .patch(authController.protect,  userController.deleteMe)\r\n  .patch(authController.protect,  userController.updateMe)\r\n  .delete(authController.protect, authController.restrictTo('admin', 'owner'), userController.deleteUser);\r\n\r\nrouter.route(\"/getNumber/:phoneNumber\").get(userController.checkNumber)\r\nrouter.route(\"/getEmail/:email\").get(userController.checkEmail)\r\n\r\nmodule.exports = router;\r\n","const user = require(\"./../Models/userModel\");\r\n\r\nconst filterObj = (obj, ...allowedFields) => {\r\n  const newObj = {};\r\n  Object.keys(obj).forEach(el => {\r\n    if (allowedFields.includes(el)) newObj[el] = obj[el];\r\n  });\r\n  return newObj;\r\n};\r\n\r\nexports.getAllUsers = async (req, res) => {\r\n  try {\r\n    const users = await user.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: users.length,\r\n      data: {\r\n        users,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getUser = async (req, res) => {\r\n  try {\r\n    const user = await user.find({email: req.params.user});\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        user,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.checkNumber = async (req, res) => {\r\n  try {\r\n    // console.log(\"here\")\r\n    const user = await user.find({phoneNumber: req.params.phoneNumber});\r\n    // console.log(user)\r\n    if(user.length === 0){\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        message: \"User doesn't exist\",\r\n      });\r\n    } else{\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: {\r\n          user,\r\n        },\r\n      });\r\n    }\r\n    return\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.checkEmail = async (req, res) => {\r\n  try {\r\n    // console.log(\"here\")\r\n    const user = await user.find({email: req.params.email});\r\n    // console.log(user)\r\n    if(user.length === 0){\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        message: \"User doesn't exist\",\r\n      });\r\n    } else{\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        data: {\r\n          user,\r\n        },\r\n      });\r\n    }\r\n    return\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createUser = async (req, res) => {\r\n  try {\r\n    const newUser = await user.create(req.body);\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        user: newUser,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateMe = async (req, res, next) => {\r\n  try{\r\n    // 1) Create error if user POSTs password data\r\n  if (req.body.password || req.body.passwordConfirm) {\r\n    return next(\r\n      res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"'This route is not for password updates. Please use /updateMyPassword.'\",\r\n      })\r\n    );\r\n  }\r\n\r\n  // 2) Filtered out unwanted fields names that are not allowed to be updated\r\n  const filteredBody = filterObj(req.body, 'name', 'email');\r\n\r\n  // 3) Update user document\r\n  const user = await user.find({email: req.params.user});\r\n  const updatedUser = await user.findByIdAndUpdate(user.id, filteredBody, {\r\n    new: true,\r\n    runValidators: true\r\n  });\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    data: {\r\n      user: updatedUser\r\n    }\r\n  });\r\n  } catch(err){\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n\r\n};\r\n\r\nexports.deleteMe = async (req, res, next) => {\r\n  try{\r\n    const user = await user.find({email: req.params.user});\r\n    await user.findByIdAndUpdate(user.id, { active: false });\r\n\r\n  res.status(204).json({\r\n    status: 'success',\r\n    data: null\r\n  });\r\n  } catch(err){\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deleteUser = async (req, res) => {\r\n  try {\r\n    const user = await user.find({email: req.params.user});\r\n    await user.findByIdAndDelete(user[0].id)\r\n\r\n    res.status(204).json({\r\n      status: \"success\",\r\n      data: null,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateUser = async (req, res) => {\r\n  try {\r\n    const user = await user.find({email: req.params.user});\r\n    const updatedUser = await user.findByIdAndUpdate(user[0].id, req.body, {\r\n      new: true,\r\n      runValidators: true\r\n    });\r\n    // user.save()\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      user: updatedUser,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const mongoose = require(\"mongoose\");\r\nconst validator = require(\"validator\");\r\nconst bcrypt = require(\"bcryptjs\")\r\nconst crypto = require(\"crypto\")\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    firstName: {\r\n      type: String,\r\n      required: [true, \"A user must have a first name\"],\r\n      trim: true,\r\n      maxlength: [\r\n        20,\r\n        \"A user's name must have less or equal then 20 characters\",\r\n      ],\r\n      minlength: [\r\n        1,\r\n        \"A user's name must have more or equal then 10 characters\",\r\n      ],\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, \"A user must have a first name\"],\r\n      trim: true,\r\n      maxlength: [\r\n        20,\r\n        \"A user's name must have less or equal then 20 characters\",\r\n      ],\r\n      minlength: [\r\n        1,\r\n        \"A user's name must have more or equal then 10 characters\",\r\n      ],\r\n    },\r\n    googleID: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    facebookID: {\r\n      type: String,\r\n      unique: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, \"Please provide your email\"],\r\n      unique: true,\r\n      lowercase: true,\r\n      validate: [validator.isEmail, \"Please provide a valid email\"],\r\n    },\r\n    phoneNumber: {\r\n      type: String,\r\n      unique: true,\r\n      lowercase: true,\r\n      required: [true, \"Please provide your phoneNumber\"],\r\n      validate: [\r\n        validator.isMobilePhone,\r\n        \"Please provide a valid phone number\",\r\n      ],\r\n    },\r\n    password: {\r\n      type: String,\r\n      // required: [true, \"Please provide a password\"],\r\n      minlength: 8,\r\n      // select: false,\r\n    },\r\n    passwordConfirm: {\r\n      type: String,\r\n      // required: [true, \"Please confirm your password\"],\r\n      validate: {\r\n        // This only works on CREATE and SAVE!!!\r\n        validator: function (el) {\r\n          return el === this.get(\"password\");\r\n        },\r\n        message: \"Passwords are not the same!\",\r\n      },\r\n    },\r\n    role: {\r\n      type: String,\r\n      enum: [\"user\", \"editor\", \"admin\"],\r\n      default: \"user\",\r\n    },\r\n    active: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    customerID: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    photo: {\r\n      type: String,\r\n      default: \"An image based on the users name\",\r\n    },\r\n    address: String,\r\n    dob: {\r\n      type: Date,\r\n      validate: [validator.isDate, \"give a valid date of birth\"],\r\n    },\r\n    verification: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    registrationDate: {\r\n      type: Date,\r\n      default: new Date(),\r\n    },\r\n    cart: [{\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'Cart'\r\n    }],\r\n    order: [{\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'Order'\r\n    }],\r\n    passwordChangedAt: Date,\r\n    passwordResetToken: String,\r\n    passwordResetExpires: Date\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nuserSchema.pre('save', async function(next){\r\n  if(!this.isModified('password')) return next()\r\n\r\n  this.password = await bcrypt.hash(this.password, 12)\r\n\r\n  this.passwordConfirm = undefined\r\n  next()\r\n})\r\n\r\nuserSchema.pre('save', function(next) {\r\n  if (!this.isModified('password') || this.isNew) return next();\r\n\r\n  this.passwordChangedAt = Date.now() - 1000;\r\n  next();\r\n});\r\n\r\nuserSchema.pre(/^find/, function(next) {\r\n  // this points to the current query\r\n  this.find({ active: { $ne: false } });\r\n  next();\r\n});\r\n\r\nuserSchema.methods.correctPassword = async function(candidatePassword, userPassword) {\r\n  return await bcrypt.compare(candidatePassword, userPassword)\r\n}\r\n\r\nuserSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\r\n  if (this.passwordChangedAt) {\r\n    const changedTimestamp = parseInt(\r\n      this.passwordChangedAt.getTime() / 1000,\r\n      10\r\n    );\r\n\r\n    return JWTTimestamp < changedTimestamp;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nuserSchema.methods.createPasswordResetToken = function() {\r\n  function generateVerificationCode() {\r\n    return Math.floor(100000 + Math.random() * 900000);\r\n  }\r\n  // const resetToken = crypto.randomBytes(32).toString('hex');\r\n  const resetToken = generateVerificationCode().toString();\r\n\r\n  this.passwordResetToken = crypto\r\n    .createHash('sha256')\r\n    .update(resetToken)\r\n    .digest('hex');\r\n\r\n\r\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\r\n\r\n  return resetToken;\r\n};\r\n\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\nmodule.exports = User;\r\n","const crypto = require(\"crypto\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst user = require(\"./../Models/userModel\");\r\nconst { promisify } = require(\"util\");\r\n// const Email = require(\"./../utils/email\");\r\n\r\nfunction generateVerificationCode() {\r\n  return Math.floor(100000 + Math.random() * 900000);\r\n}\r\n\r\nconst signToken = (id) => {\r\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\r\n    expiresIn: process.env.JWT_EXPIRES_IN,\r\n  });\r\n};\r\n\r\nexports.createSendToken = (user, statusCode, res) => {\r\n  const token = signToken(user._id);\r\n  const cookieOptions = {\r\n    expires: new Date(\r\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\r\n    ),\r\n    httpOnly: true,\r\n  };\r\n  if (process.env.NODE_ENV === \"production\") cookieOptions.secure = true;\r\n\r\n  res.cookie(\"jwt\", token, cookieOptions);\r\n\r\n  // Remove password from output\r\n  user.password = undefined;\r\n  res.status(statusCode).json({\r\n    status: \"success\",\r\n    token,\r\n    data: {\r\n      user,\r\n    },\r\n  });\r\n  return token;\r\n};\r\n\r\nexports.signup = async (req, res, next) => {\r\n  try {\r\n    let newUser;\r\n    newUser = await user.create({\r\n      firstName: req.body.firstName,\r\n      lastName: req.body.lastName,\r\n      email: req.body.email,\r\n      phoneNumber: req.body.phoneNumber,\r\n      password: req.body.password,\r\n      passwordConfirm: req.body.passwordConfirm,\r\n    });\r\n    const url = \"noironmain.com\";\r\n    // await new Email(newUser, url).sendWelcome();\r\n    exports.createSendToken(newUser, 201, res);\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    if (!email || !password) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"Yu have not provided either email address or password\",\r\n      });\r\n    }\r\n\r\n    const user = await user.findOne({ email });\r\n    const correct = await user.correctPassword(password, user.password);\r\n\r\n    if (!user || !correct) {\r\n      res.status(401).json({\r\n        status: \"fail\",\r\n        message: \"Incorrect email or password\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    exports.createSendToken(user, 200, res);\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.loginEmail = async (req, res, next) => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    const user = await user.findOne({ email });\r\n\r\n    if (!user) {\r\n      const newUser = await user.create({\r\n        firstName: req.body.firstName,\r\n        lastName: req.body.lastName,\r\n        email: req.body.email,\r\n        phoneNumber: req.body.phoneNumber,\r\n        googleID: req.body.googleID,\r\n        facebookID: req.body.facebookID,\r\n      });\r\n      exports.createSendToken(newUser, 201, res);\r\n      return;\r\n    }\r\n    if (user.googleID) {\r\n      if (req.body.googleID === user.googleID) {\r\n        return exports.createSendToken(user, 201, res);\r\n      } else {\r\n        return res.status(400).json({\r\n          status: \"fail\",\r\n          message: \"login with your email again\",\r\n        });\r\n      }\r\n    }\r\n    if (user.facebookID) {\r\n      if (req.body.facebookID === user.facebookID) {\r\n        return exports.createSendToken(user, 201, res);\r\n      } else {\r\n        return res.status(400).json({\r\n          status: \"fail\",\r\n          message: \"login with your email again\",\r\n        });\r\n      }\r\n    }\r\n\r\n    return res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"Login with your email again or use a different route\",\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.loginNumber = async (req, res, next) => {\r\n  try {\r\n    const { phoneNumber } = req.body;\r\n\r\n    const user = await user.findOne({ phoneNumber });\r\n\r\n    if (!user) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"Login with your email again or use a different route\",\r\n      });\r\n    }\r\n\r\n    // return res.status(200).json({\r\n    //   status: \"success\",\r\n    //   message: \"you have a user\",\r\n    //   data: {\r\n    //     user\r\n    //   }\r\n    // });\r\n    exports.createSendToken(user, 200, res);\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.protect = async (req, res, next) => {\r\n  // 1) Getting token and check of it's there\r\n  let token;\r\n  if (\r\n    req.headers.authorization &&\r\n    req.headers.authorization.startsWith(\"Bearer\")\r\n  ) {\r\n    token = req.headers.authorization.split(\" \")[1];\r\n  }\r\n\r\n  if (!token) {\r\n    return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"The token is wrong\",\r\n      })\r\n  }\r\n\r\n  // 2) Verification token\r\n  // console.log(process.env.JWT_SECRET);\r\n  let decoded;\r\n  try {\r\n    decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\r\n  } catch (error) {\r\n    if (error.message === \"jwt expired\") {\r\n      // console.log(\"Token expired\");\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"The token is wrong\",\r\n      });\r\n    } else {\r\n      // Handle other JWT verification errors\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"The token is wrong\",\r\n      });\r\n    }\r\n  }\r\n  // const decoded = await jwt.verify(token, process.env.JWT_SECRET);\r\n  // console.log(\"hdiddjddkkkkmjnakdkm\");\r\n  // console.log(decoded);\r\n  // console.log(\"We have it all decoded\");\r\n\r\n  // 3) Check if user still exists\r\n  const currentUser = await user.findById(decoded.id);\r\n  // console.log(currentUser);\r\n  if (!currentUser) {\r\n    // console.log(\"This user doesn't exist so we cannot move on\");\r\n    return res.status(401).json({\r\n      status: \"fail\",\r\n      message: \"This user does not exist\",\r\n    });\r\n  }\r\n\r\n  // 4) Check if user changed password after the token was issued\r\n  if (currentUser.changedPasswordAfter(decoded.iat)) {\r\n    // console.log(\"The user changed password so we are fucked\");\r\n    return res.status(401).json({\r\n        status: \"fail\",\r\n        message: \"User recently changed password! Please login again\",\r\n      })\r\n  }\r\n\r\n  // GRANT ACCESS TO PROTECTED ROUTE\r\n  // console.log(\"if we are here, then we are fucking good, so what?\");\r\n  req.user = currentUser;\r\n  next();\r\n};\r\n\r\nexports.restrictTo = (...roles) => {\r\n  return (req, res, next) => {\r\n    // roles ['admin', 'lead-guide']\r\n    if (!roles.includes(req.user.role)) {\r\n      return res.status(403).json({\r\n        status: \"fail\",\r\n        message: \"You do not have permission to perform this action\",\r\n      });\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n\r\nexports.forgotPassword = async (req, res, next) => {\r\n  // 1) Get user based on POSTed email\r\n  const user = await user.findOne({ email: req.body.email });\r\n  if (!user) {\r\n    return res.status(404).json({\r\n        status: \"fail\",\r\n        message: \"There is no user with email address.\",\r\n      })\r\n  }\r\n\r\n  // 2) Generate the random reset token\r\n  const resetToken = user.createPasswordResetToken();\r\n  await user.save({ validateBeforeSave: false });\r\n  // 3) Send it to user's email\r\n  const verificationCode = generateVerificationCode();\r\n  console.log(\"Verification Code:\", verificationCode);\r\n\r\n  const resetURL = `${req.protocol}://${req.get(\r\n    \"host\"\r\n  )}/api/v1/users/resetPassword/${resetToken}`;\r\n\r\n  const message = `Forgot your password? Submit a PATCH request with your new password and passwordConfirm to: ${resetURL}.\\nIf you didn't forget your password, please ignore this email!`;\r\n\r\n  try {\r\n    // await sendEmail({\r\n    //   email: user.email,\r\n    //   subject: \"Your password reset token (valid for 10 min)\",\r\n    //   message,\r\n    // });\r\n    // await new Email(user, resetToken).sendPasswordReset();\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      message: \"Token sent to email!\",\r\n    });\r\n  } catch (err) {\r\n    user.passwordResetToken = undefined;\r\n    user.passwordResetExpires = undefined;\r\n    await user.save({ validateBeforeSave: false });\r\n\r\n    return res.status(500).json({\r\n        status: \"fail\",\r\n        message: \"There was an error sending the email. Try again later!\",\r\n      })\r\n  }\r\n};\r\n\r\nexports.resetPassword = async (req, res, next) => {\r\n  try {\r\n    // 1) Get user based on the token\r\n\r\n    const hashedToken = crypto\r\n      .createHash(\"sha256\")\r\n      .update(req.params.token)\r\n      .digest(\"hex\");\r\n\r\n    const user = await user.findOne({\r\n      passwordResetToken: hashedToken,\r\n      passwordResetExpires: { $gt: Date.now() },\r\n    });\r\n    // 2) If token has not expired, and there is user, set the new password\r\n    if (!user) {\r\n      return res.status(400).json({\r\n          status: \"fail\",\r\n          message: \"Token is invalid or has expired\",\r\n        })\r\n    }\r\n    user.password = req.body.password;\r\n    user.passwordConfirm = req.body.passwordConfirm;\r\n    user.passwordResetToken = undefined;\r\n    user.passwordResetExpires = undefined;\r\n    await user.save();\r\n\r\n    // 3) Update changedPasswordAt property for the user\r\n    // 4) Log the user in, send JWT\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      // token,\r\n      data: {\r\n        user,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"shit failed\",\r\n    });\r\n  }\r\n};\r\n\r\nexports.updatePassword = async (req, res, next) => {\r\n  const user = await user.findOne({ email: req.params.email });\r\n  if (!user) {\r\n    return res.status(404).json({\r\n        status: \"fail\",\r\n        message: \"There is no user with email address.\",\r\n      })\r\n  }\r\n\r\n  // 2) If token has not expired, and there is user, set the new password\r\n  if (!user) {\r\n    return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"This user does not exist\",\r\n      })\r\n  }\r\n\r\n  const checkPassword = await user.correctPassword(\r\n    req.body.passwordCurrent,\r\n    user.password\r\n  );\r\n  if (!checkPassword) {\r\n    return res.status(401).json({\r\n        status: \"fail\",\r\n        message: \"Y0u entered the wrong password\",\r\n      })\r\n  }\r\n  user.password = req.body.password;\r\n  user.passwordConfirm = req.body.passwordConfirm;\r\n  user.save();\r\n  try {\r\n    createSendToken(user, 200, res);\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const express = require(\"express\");\r\nconst productController = require(\"./../controllers/productController\");\r\nconst authController = require(\"./../controllers/authController\")\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route(\"/\")\r\n  .get(productController.getAllProducts)\r\n  .post(authController.protect, authController.restrictTo('admin', 'owner'), productController.createProduct);\r\n\r\nrouter\r\n  .route(\"/:product\")\r\n  .get(productController.getProduct)\r\n  .patch(authController.protect, authController.restrictTo('admin', 'owner'), productController.updateProduct)\r\n  .delete(authController.protect, authController.restrictTo('admin', 'owner'), productController.deleteProduct);\r\n\r\nmodule.exports = router;\r\n","const product = require(\"./../Models/productModel\");\r\n\r\nexports.getAllProducts = async (req, res) => {\r\n  try {\r\n    const products = await product.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: products.length,\r\n      data: {\r\n        products,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createProduct = async (req, res) => {\r\n  try {\r\n    const product = await product.create(req.body);\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        product,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getProduct = async (req, res) => {\r\n  try {\r\n    const product = await product.findById(req.params.product);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        product,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deleteProduct = async (req, res) => {\r\n  try {\r\n    await product.findByIdAndDelete(req.params.product);\r\n\r\n    res.status(204).json({\r\n      status: \"success\",\r\n      data: null,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateProduct = async (req, res) => {\r\n  try {\r\n    const product = await product.findByIdAndUpdate(\r\n      req.params.product,\r\n      req.body,\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    );\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      product,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const mongoose = require('mongoose');\r\nconst validator = require('validator');\r\n\r\nconst productSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, 'A product must have a name'],\r\n      unique: true,\r\n      trim: true,\r\n      maxlength: [150, 'A tour name must have less or equal then 40 characters'],\r\n      minlength: [10, 'A tour name must have more or equal then 10 characters'],\r\n    },\r\n    category: {\r\n      type: String,\r\n      required: [true, 'A product must always belong to a category']\r\n    },\r\n    Brand: {\r\n      type: String,\r\n      required: [true, 'A product must always have a brand']\r\n    },\r\n    stock: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    image: {\r\n        type: [String],\r\n        default: []\r\n    },\r\n    tags: {\r\n        type: [String],\r\n        default: []\r\n    },\r\n    ratingsAverage: {\r\n      type: Number,\r\n      default: 4.5,\r\n      min: [1, 'Rating must be above 1.0'],\r\n      max: [5, 'Rating must be below 5.0'],\r\n      set: val => Math.round(val * 10) / 10 // 4.666666, 46.6666, 47, 4.7\r\n    },\r\n    ratingsQuantity: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    reviews: {\r\n        type: [String],\r\n        default: []\r\n    },\r\n    price: {\r\n      type: Number,\r\n      required: [true, 'A tour must have a price']\r\n    },\r\n    priceDiscount: {\r\n      type: Number,\r\n      validate: {\r\n        validator: function(val) {\r\n          // this only points to current doc on NEW document creation\r\n          return val < this.price;\r\n        },\r\n        message: `Discount price (${this.priceDiscount}) should be below regular price`\r\n      }\r\n    },\r\n    description: {\r\n      type: String,\r\n      trim: true\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n      select: false\r\n    },\r\n    availability: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    variants: {\r\n        type: [String],\r\n        default: []\r\n    }\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true }\r\n  }\r\n);\r\n\r\n\r\nconst Tour = mongoose.model('Product', productSchema);\r\n\r\nmodule.exports = Tour;","const express = require(\"express\");\r\nconst reviewController = require(\"./../controllers/reviewController\");\r\nconst authController = require(\"../controllers/authController\")\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route(\"/\")\r\n  .get(reviewController.getAllReviews)\r\n  .post(authController.protect, reviewController.createReview);\r\n\r\n// router.route(\"/:userReviews\").get(reviewController.getUserReview)\r\nrouter\r\n  .route(\"/:review\")\r\n  .get(reviewController.getReview)\r\n  // .patch(authController.protect, reviewController.updateReview)\r\n  .delete(authController.protect, authController.restrictTo('admin', 'owner'), reviewController.deleteReview);\r\n\r\nmodule.exports = router;\r\n","const review = require(\"./../Models/reviewModel\");\r\n\r\nexports.getAllReviews = async (req, res) => {\r\n  try {\r\n    const reviews = await review.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: reviews.length,\r\n      data: {\r\n        reviews,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createReview = async (req, res) => {\r\n  try {\r\n    const userID = req.user.id;\r\n    const productID = req.body.productID;\r\n    if (!req.user) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"You have to be loggedIn to make a review\",\r\n      });\r\n    }\r\n    if (!req.user.order.includes(productID)) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message:\r\n          \"You are trying to write a review for a product you have not purchased\",\r\n      });\r\n    }\r\n\r\n    const existingReview = await review.findOne({ userID, productID });\r\n\r\n    if (existingReview) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message: \"You have already provided a review for this product.\",\r\n      });\r\n    }\r\n\r\n    const review = await review.create({ ...req.body, userID: req.user.id });\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        review,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getReview = async (req, res) => {\r\n  try {\r\n    const review = await review.findById(req.params.review);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        review,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getUserReview = async (req, res) => {\r\n  try {\r\n    const userReviews = await review.find({ userID: req.params.userReviews });\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: userReviews.length,\r\n      data: {\r\n        reviews: userReviews,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deleteReview = async (req, res) => {\r\n  try {\r\n    await review.findByIdAndDelete(req.params.review);\r\n\r\n    res.status(204).json({\r\n      status: \"success\",\r\n      data: null,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateReview = async (req, res) => {\r\n  try {\r\n    const review = await review.findByIdAndUpdate(\r\n      req.params.review,\r\n      req.body,\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    );\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      review,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const mongoose = require('mongoose');\r\n\r\nconst reviewSchema = new mongoose.Schema(\r\n  {\r\n    review: {\r\n      type: String,\r\n      required: [true, 'Review can not be empty!']\r\n    },\r\n    rating: {\r\n      type: Number,\r\n      min: 1,\r\n      max: 5\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now\r\n    },\r\n    productID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'Product',\r\n      required: [true, 'Review must belong to a Product.']\r\n    },\r\n    userID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User',\r\n      required: [true, 'Review must belong to a user']\r\n    }\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true }\r\n  }\r\n);\r\n\r\nconst Review = mongoose.model('Review', reviewSchema);\r\n\r\nmodule.exports = Review;","const express = require(\"express\");\r\nconst userController = require(\"./../controllers/userController\");\r\nconst authController = require(\"./../controllers/authController\")\r\nconst paymentController = require(\"./../controllers/paymentController\")\r\n\r\nconst router = express.Router();\r\n\r\n// authController.protect,\r\nrouter.post('/checkout-session/', authController.protect, paymentController.getCheckOutSession)\r\nrouter.post('/payment-sheet/', authController.protect, paymentController.getCardDetails)\r\nrouter.post('/payment-methods/', authController.protect, paymentController.getPaymentMethods)\r\n// router.get('/hello', userController.getAllUsers)\r\n\r\n\r\nmodule.exports = router;\r\n","const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\r\nconst Order = require(\"./../Models/orderModel\");\r\nconst user = require(\"./../Models/userModel\");\r\n\r\nexports.getCheckOutSession = async (req, res, next) => {\r\n  try {\r\n    const user = req.user;\r\n    // console.log(\"body\", req.body)\r\n    let customer;\r\n    if (user.customerID) {\r\n      customer = user.customerID;\r\n    } else {\r\n      customer = await stripe.customers.create();\r\n      customer = customer.id;\r\n      const updatedUser = await user.findOneAndUpdate(\r\n        { _id: user._id },\r\n        {\r\n          $set: {\r\n            customerID: customer,\r\n          },\r\n        },\r\n        { new: true }\r\n      );\r\n      // console.log(updatedUser)\r\n    }\r\n\r\n    const ephemeralKey = await stripe.ephemeralKeys.create(\r\n      { customer: customer },\r\n      { apiVersion: \"2023-10-16\" }\r\n    );\r\n    const paymentIntent = await stripe.paymentIntents.create({\r\n      amount: req.body.amount * 100,\r\n      customer: customer,\r\n      setup_future_usage: \"off_session\",\r\n      currency: \"usd\",\r\n      automatic_payment_methods: {\r\n        enabled: true,\r\n      },\r\n    });\r\n    // if (paymentIntent) {\r\n    //   const order = await Order.create({ ...req.body, userID: req.user.id });\r\n    //   console.log(order)\r\n    //   const user = await User.findById(order.userID);\r\n    //   user.order.push(order._id);\r\n    //   user.save();\r\n    // }\r\n    // console.log(paymentIntent);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      clientSecret: paymentIntent.client_secret,\r\n      ephemeralKey: ephemeralKey.secret,\r\n      customer: customer,\r\n      // order: order.id\r\n    });\r\n  } catch (err) {\r\n    // console.log(err.message);\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"just chill, I have no idea\",\r\n      error: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getCardDetails = async (req, res, next) => {\r\n  try {\r\n    const user = req.user;\r\n    let customer;\r\n    if (user.customerID) {\r\n      customer = user.customerID;\r\n    } else {\r\n      customer = await stripe.customers.create();\r\n      customer = customer.id;\r\n      const updatedUser = await user.findOneAndUpdate(\r\n        { _id: user._id },\r\n        {\r\n          $set: {\r\n            customerID: customer,\r\n          },\r\n        },\r\n        { new: true }\r\n      );\r\n      // console.log(updatedUser)\r\n    }\r\n\r\n    const ephemeralKey = await stripe.ephemeralKeys.create(\r\n      { customer: customer },\r\n      { apiVersion: \"2023-10-16\" }\r\n    );\r\n\r\n    const paymentMethods = await stripe.paymentMethods.list({\r\n      customer: customer,\r\n      type: \"card\",\r\n    });\r\n\r\n    // console.log(paymentMethods.data);\r\n\r\n    const setupIntent = await stripe.setupIntents.create({\r\n      customer: customer,\r\n      // In the latest version of the API, specifying the `automatic_payment_methods` parameter\r\n      // is optional because Stripe enables its functionality by default.\r\n      automatic_payment_methods: {\r\n        enabled: true,\r\n      },\r\n    });\r\n    // console.log(setupIntent)\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      setupIntent: setupIntent.client_secret,\r\n      ephemeralKey: ephemeralKey.secret,\r\n      customer: customer,\r\n    });\r\n  } catch (err) {\r\n    // console.log(err.message);\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"just chill, I have no idea\",\r\n      error: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getPaymentMethods = async (req, res, next) => {\r\n  try {\r\n    const customer = req.user.customerID;\r\n    if (!customer) {\r\n      return res.status(200).json({\r\n        status: \"success\",\r\n        note: \"no card\",\r\n        message: \"This user doesn't have any payment method set yet\",\r\n      });\r\n    }\r\n    const paymentMethods = await stripe.paymentMethods.list({\r\n      customer: customer,\r\n      type: \"card\",\r\n    });\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      paymentMethods: paymentMethods.data,\r\n    });\r\n\r\n    // console.log(paymentMethods.data);\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: \"just chill, I have no idea\",\r\n      error: err,\r\n    });\r\n  }\r\n};\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst orderSchema = new mongoose.Schema(\r\n  {\r\n    date: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    totalPrice: {\r\n      type: Number,\r\n      required: [true, \"An order must always have a price\"],\r\n    },\r\n    paymentStatus: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    shippingAddress: {\r\n      type: String,\r\n      required: [true, \"Provide location for the order\"],\r\n    },\r\n    orderStatus: {\r\n      type: String,\r\n      enum: [\"Ready\", \"Processing\", \"Shipped\", \"Delivered\", \"Canceled\"],\r\n      default: \"Ready\",\r\n    },\r\n    paymentMothod: {\r\n      type: String,\r\n      required: [true, \"An order must have a payment method\"],\r\n    },\r\n    fulfillmentDate: Date,\r\n    productID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: \"Product\",\r\n      required: [true, \"An Order must have a product.\"],\r\n    },\r\n    userID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: \"User\",\r\n      required: [true, \"An Order must belong to a user\"],\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now(),\r\n      select: false,\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Order = mongoose.model(\"Order\", orderSchema);\r\n\r\nmodule.exports = Order;\r\n","const express = require(\"express\");\r\nconst orderController = require(\"./../controllers/orderController\");\r\nconst authController = require(\"./../controllers/authController\");\r\n// const io = require(\"../index\");\r\n\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route(\"/\")\r\n  .get(\r\n    authController.protect,\r\n    authController.restrictTo(\"admin\", \"owner\"),\r\n    orderController.getAllOrders\r\n  )\r\n  .post(authController.protect, orderController.createOrder);\r\n\r\nrouter\r\n  .route(\"/get-your-orders\")\r\n  .get(authController.protect, orderController.getUserOrders);\r\n\r\nrouter\r\n  .route(\"/:order\")\r\n  .get(authController.protect, orderController.getOrder)\r\n  .patch(\r\n    authController.protect,\r\n    authController.restrictTo(\"admin\", \"owner\"),\r\n    orderController.updateOrder\r\n  )\r\n  .delete(\r\n    authController.protect,\r\n    authController.restrictTo(\"admin\", \"owner\"),\r\n    orderController.deleteOrder\r\n  );\r\n\r\nmodule.exports = router;\r\n","const user = require(\"./../Models/userModel\")\r\nconst order = require(\"./../Models/orderModel\");\r\n\r\n\r\nexports.getAllOrders = async (req, res) => {\r\n  try {\r\n    const orders = await order.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: orders.length,\r\n      data: {\r\n        orders,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createOrder = async (req, res) => {\r\n  try {\r\n    const order = await order.create({...req.body, userID: req.user.id});\r\n    const user = await user.findById(order.userID)\r\n    user.order.push(order._id)\r\n    user.save()\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        order,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getOrder = async (req, res) => {\r\n  try {\r\n    const orderID = req.params.order;\r\n    if (!req.user.order.includes(orderID)) {\r\n      return res.status(400).json({\r\n        status: \"fail\",\r\n        message:\r\n          \"You are trying to access the orders of another user, that's fucked up bruh\",\r\n      });\r\n    }\r\n    const order = await order.findById(req.params.order);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        order,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getUserOrders = async (req, res) => {\r\n  try {\r\n    const order = await order.find({userID: req.user.id});\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        order,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deleteOrder = async (req, res) => {\r\n  try {\r\n    await order.findByIdAndDelete(req.params.order);\r\n\r\n    res.status(204).json({\r\n      status: \"success\",\r\n      data: null,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateOrder = async (req, res) => {\r\n  try {\r\n    const order = await order.findByIdAndUpdate(\r\n      req.params.order,\r\n      req.body,\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    );\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      order,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deliverOrder = async (req, res, next) => {\r\n  try {\r\n    const order = await order.findByIdAndUpdate(\r\n      req.params.order,\r\n      req.body,\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    );\r\n\r\n    req.order = order\r\n    next()\r\n\r\n    // res.status(200).json({\r\n    //   status: \"success\",\r\n    //   order,\r\n    // });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const express = require(\"express\");\r\nconst cartController = require(\"./../controllers/cartController\");\r\nconst authController = require(\"./../controllers/authController\")\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route(\"/\")\r\n  .get(authController.protect, authController.restrictTo('admin', 'owner'), cartController.getAllCarts)\r\n  .post(authController.protect, cartController.createCart);\r\n\r\nrouter\r\n  .route(\"/:product\")\r\n  .get(authController.protect, cartController.getCart)\r\n  .patch(authController.protect, cartController.updateCart)\r\n  .delete(authController.protect, cartController.deleteCart);\r\n\r\nmodule.exports = router;\r\n","const cart = require(\"./../Models/cartModel\");\r\nconst user = require(\"./../Models/userModel\")\r\n\r\nexports.getAllCarts = async (req, res) => {\r\n  try {\r\n    const carts = await cart.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: carts.length,\r\n      data: {\r\n        carts,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createCart = async (req, res) => {\r\n  try {\r\n    const cart = await cart.create(req.body);\r\n    const user = await user.findById(cart.userID)\r\n    user.cart.push(cart._id)\r\n    user.save()\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        cart,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getCart = async (req, res) => {\r\n  try {\r\n    const cart = await cart.findById(req.params.cart);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        cart,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.deleteCart = async (req, res) => {\r\n  try {\r\n    await cart.findByIdAndDelete(req.params.cart);\r\n\r\n    res.status(204).json({\r\n      status: \"success\",\r\n      data: null,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.updateCart = async (req, res) => {\r\n  try {\r\n    const cart = await cart.findByIdAndUpdate(\r\n      req.params.cart,\r\n      req.body,\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    );\r\n\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      cart,\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst cartSchema = new mongoose.Schema(\r\n  {\r\n    dateUpdate: {\r\n      type: Date,\r\n      default: Date.now(),\r\n    },\r\n    totalPrice: {\r\n      type: Number,\r\n      required: [true, \"An order must always have a price\"],\r\n    },\r\n    productID: [\r\n      {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: \"Product\",\r\n        required: [true, \"Review must belong to a Product.\"],\r\n      },\r\n    ],\r\n    userID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: \"User\",\r\n      required: [true, \"Review must belong to a user\"],\r\n      unique: true\r\n    }\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  }\r\n);\r\n\r\nconst Cart = mongoose.model(\"Cart\", cartSchema);\r\n\r\nmodule.exports = Cart;\r\n","const express = require(\"express\");\r\nconst communicationController = require(\"./../controllers/communicationController\");\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route(\"/\")\r\n  .get(communicationController.getAllCommunication)\r\n  .post(communicationController.createCommunication);\r\n\r\nrouter.route(\"/:userCommunications\").get(communicationController.getUserCommunication)\r\nrouter\r\n  .route(\"/:communication\")\r\n  .get(communicationController.getCommunication)\r\n\r\nmodule.exports = router;\r\n","const communication = require(\"./../Models/communicationModel\");\r\n\r\nexports.getAllCommunication = async (req, res) => {\r\n  try {\r\n    const communication = await communication.find();\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      results: communication.length,\r\n      data: {\r\n        communication,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.createCommunication = async (req, res) => {\r\n  try {\r\n    const communication = await communication.create(req.body);\r\n\r\n    res.status(201).json({\r\n      status: \"success\",\r\n      data: {\r\n        communication,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(400).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getCommunication = async (req, res) => {\r\n  try {\r\n    const communication = await communication.findById(req.params.product);\r\n    res.status(200).json({\r\n      status: \"success\",\r\n      data: {\r\n        communication,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    res.status(404).json({\r\n      status: \"fail\",\r\n      message: err,\r\n    });\r\n  }\r\n};\r\n\r\nexports.getUserCommunication = async (req, res) => {\r\n    try {\r\n      const userCommunications = await communication.find({userID: req.params.userCommunications});\r\n      res.status(200).json({\r\n        status: \"success\",\r\n        results: userCommunications.length,\r\n        data: {\r\n          comms: userCommunications,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      res.status(404).json({\r\n        status: \"fail\",\r\n        message: err,\r\n      });\r\n    }\r\n  };","const mongoose = require('mongoose');\r\n\r\nconst communicationSchema = new mongoose.Schema(\r\n  {\r\n    subject: {\r\n      type: String,\r\n    },\r\n    body: {\r\n      type: String,\r\n      required: [true, \"A communication must always have a body\"]\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now()\r\n    },\r\n    statuts: {\r\n      type: String,\r\n      enum: ['resolved', 'read', 'in-progress'],\r\n      default: \"in-progress\"\r\n    },\r\n    communicationType: {\r\n      type: String,\r\n      enum: ['email', 'sms', 'in-app']\r\n    },\r\n    userID: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: 'User',\r\n      required: [true, 'Review must belong to a user']\r\n    }\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true }\r\n  }\r\n);\r\n\r\nconst Communication = mongoose.model('Communication', communicationSchema);\r\n\r\nmodule.exports = Communication;"],"names":[],"version":3,"file":"app.js.map","sourceRoot":"/"}